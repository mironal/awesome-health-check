{"version":3,"sources":["../node_modules/regenerator-runtime/runtime.js","../node_modules/regenerator-runtime/runtime-module.js","../node_modules/@babel/runtime/regenerator/index.js","background.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","file":"background.js","sourceRoot":"../src","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n","module.exports = require(\"regenerator-runtime\");\n","import {\n  Messages,\n  StartCheckMessage,\n  BackgroundMessages,\n  CancelCheckMessage,\n} from \"./message\"\n\nconst clientId = \"4be04a7e12249b9ea66a\"\nconst clientSecret = \"29c5784cff71998589bbad9e441a8f3b8ab6780e\"\nconst redirectUri = \"https://pkedcjkdefgpdelpbcmbmeomcjbeemfm.chromiumapp.org/\"\n\nvar accessToken: string | null = null\n\nconst parseQuery = (query: string): { [key: string]: string } => {\n  return query.split(/&/).reduce(\n    (result, current) => {\n      const pair = current.split(/=/)\n      result[pair[0]] = pair[1]\n      return result\n    },\n    {} as { [key: string]: string },\n  )\n}\n\nconst exchangeCodeForToken = async (code: string) => {\n  const url =\n    \"https://github.com/login/oauth/access_token?\" +\n    \"client_id=\" +\n    clientId +\n    \"&client_secret=\" +\n    clientSecret +\n    \"&redirect_uri=\" +\n    redirectUri +\n    \"&code=\" +\n    code\n\n  const response = await fetch(url)\n\n  if (response.status !== 200) {\n    return Promise.reject(\n      new Error(\n        `Invalid response code: ${\n          response.status\n        }, body: ${await response.text()}`,\n      ),\n    )\n  }\n\n  const text = await response.text()\n  const parsedQuery = parseQuery(text)\n  console.log(\"parsed\", parsedQuery)\n  if (parsedQuery.access_token) {\n    return parsedQuery.access_token\n  } else {\n    return Promise.reject(new Error(`Invalid response ${text}`))\n  }\n}\n\nconst getToken = async () => {\n  if (accessToken) {\n    return accessToken\n  }\n\n  const options = {\n    interactive: true,\n    url:\n      \"https://github.com/login/oauth/authorize\" +\n      \"?client_id=\" +\n      clientId +\n      \"&redirect_uri=\" +\n      encodeURIComponent(redirectUri),\n  }\n  console.log(\"request authorize\")\n\n  return new Promise((resolve, reject) => {\n    chrome.identity.launchWebAuthFlow(options, async redirect => {\n      if (chrome.runtime.lastError) {\n        reject(chrome.runtime.lastError)\n        return\n      }\n\n      if (!redirect) {\n        // user cancel\n        reject(new Error(\"User canceled\"))\n        return\n      }\n\n      const code = parseQuery(new URL(redirect).search.replace(/^\\?/, \"\")).code\n      console.log(\"exchange code\")\n      const token = await exchangeCodeForToken(code)\n      accessToken = token\n      resolve(token)\n    })\n  })\n}\n\nconst contextMenuIds = {\n  progress: \"context_menu_id_progress\",\n  checkHealth: \"context_menu_id_check_health\",\n  cancel: \"context_menu_id_cancel\",\n}\n\nconst processMessage = (\n  msg: BackgroundMessages,\n  sender: chrome.runtime.MessageSender,\n  responseFn: (response?: any) => void,\n) => {\n  if (msg.type === \"get_token\") {\n    getToken()\n      .then(token => responseFn(token))\n      .catch(error => responseFn(error))\n  } else if (msg.type === \"update_progress\") {\n    chrome.contextMenus.update(contextMenuIds.progress, {\n      title: `Progress ${msg.data.current}/${msg.data.max}`,\n    })\n\n    if (chrome.runtime.lastError) {\n      console.error(chrome.runtime.lastError)\n      responseFn(chrome.runtime.lastError)\n    } else {\n      responseFn()\n    }\n  } else if (msg.type === \"change_icon_visibility\") {\n    if (msg.data.visible) {\n      chrome.pageAction.show(sender.tab!.id!)\n    } else {\n      chrome.pageAction.hide(sender.tab!.id!)\n    }\n  }\n}\n\nchrome.runtime.onInstalled.addListener(() => {\n  chrome.contextMenus.create({\n    id: contextMenuIds.progress,\n    title: \"progreeee\",\n    contexts: [\"page_action\"],\n    type: \"normal\",\n    enabled: false,\n    visible: false,\n  })\n  chrome.contextMenus.create({\n    id: contextMenuIds.checkHealth,\n    title: \"Check health\",\n    contexts: [\"page_action\"],\n  })\n\n  chrome.contextMenus.create({\n    id: contextMenuIds.cancel,\n    title: \"Cancel\",\n    contexts: [\"page_action\"],\n    type: \"normal\",\n    enabled: false,\n  })\n})\n\nchrome.runtime.onMessage.addListener((msg, sender, sendResp) => {\n  console.log(\"onMessage\", msg)\n  processMessage(msg, sender, sendResp)\n  return true\n})\n\nchrome.runtime.onSuspend.addListener(() => console.log(\"onSuspend\"))\n\nchrome.contextMenus.onClicked.addListener((menu, tab) => {\n  if (!tab) {\n    return\n  }\n  if (menu.menuItemId === contextMenuIds.checkHealth) {\n    const msg: StartCheckMessage = {\n      type: \"start_check\",\n    }\n    chrome.tabs.sendMessage(tab.id!, msg, () => {\n      chrome.contextMenus.update(contextMenuIds.checkHealth, {\n        enabled: false,\n      })\n      chrome.contextMenus.update(contextMenuIds.cancel, {\n        enabled: true,\n      })\n    })\n  } else if (menu.menuItemId === contextMenuIds.cancel) {\n    const msg: CancelCheckMessage = {\n      type: \"cancel_check\",\n    }\n    chrome.tabs.sendMessage(tab.id!, msg, () => {\n      chrome.tabs.sendMessage(tab.id!, msg, () => {\n        chrome.contextMenus.update(contextMenuIds.checkHealth, {\n          enabled: true,\n        })\n        chrome.contextMenus.update(contextMenuIds.cancel, {\n          enabled: false,\n        })\n      })\n    })\n  }\n})\n"]}